services:

  
  api-gateway:  # Cambiato da "app" a "api-gateway"
    build:
      context: ./api-gateway  # Cartella di build per api-gateway
      dockerfile: ${BACKEND_DOCKERFILE_NAME}  # Usa il Dockerfile.dev per lo sviluppo
    container_name: api-gateway
    ports:
      - "8000:8000"
    depends_on:
      mongo: 
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf  # Monta il file di configurazione del backend
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - MONGO_URI=mongodb://mongo:27017/3dgs_models
      - RABBITMQ_HOSTNAME=rabbitmq  # HOST RabbitMQ
      - RABBITMQ_PORT=5672  # HOST RabbitMQ
      - RABBITMQ_USER=${RABBIT_MQ_USER_WRITER}
      - RABBITMQ_PASS=${RABBIT_MQ_PASS_WRITER}
    networks:
      - my_network

  web-viewer:
    build:
      context: ./web-viewer
      dockerfile: ${FRONTEND_DOCKERFILE_NAME}  # Usa il Dockerfile.dev per lo sviluppo
    container_name: web-viewer
    restart: always
    ports:
      - "5173:5173"  # Ora il frontend è pubblico su 8080
      - "8080:8080"  # Ora il frontend è pubblico su 8080
    volumes:
      - ./web-viewer:/app  # Monta il codice locale dentro il container
      - /app/node_modules  # Evita di sovrascrivere i moduli Node.js
      - ./web-viewer/nginx.conf:/etc/nginx/nginx.conf  # Monta il file di configurazione del frontend
    depends_on:
      - api-gateway
    environment:
      - CHOKIDAR_USEPOLLING=true  # Abilita hot reload su Docker
    networks:
      - my_network
      
  mongo:
    image: mongo:8.0       # ⇦ PIN consigliato (resta su 5.0.x se i datafile nascono con 5.0)
    container_name: mongo
    command: ["--replSet","rs0","--bind_ip_all","--wiredTigerCacheSizeGB","1"]
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db      # volume nominato, NON bind su FS Windows
    networks:
      - my_network
    environment:
      - MONGO_INITDB_DATABASE=3d_gaussian_splatting
    healthcheck:
      test: ["CMD","mongosh","--quiet","mongodb://localhost:27017/admin","--eval","db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 20
    stop_grace_period: 60s
    ulimits:
      nofile:
        soft: 64000
        hard: 64000
    restart: unless-stopped
 
  # Servizio separato per inizializzare il replica set
  mongo-setup:
    image: mongo:8.0       # (o 5.0.x se resti su 5)
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - my_network
    restart: "no"
    command: >
      bash -lc "
      mongosh --host mongo:27017 --eval '
        try {
          rs.status();
          print(\"Replica set already initialized\");
        } catch(e) {
          rs.initiate({_id:\"rs0\", members:[{_id:0, host:\"mongo:27017\"}]});
          print(\"Replica set initialized\");
        }'"

  mongo-backup:
    image: mongo:8.0
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - mongo_backups:/backup
    networks:
      - my_network
    entrypoint: [ "bash","-lc",
      "while true; do \
        mongodump --host=mongo:27017 --archive=/backup/$(date +%F_%H%M).gz --gzip && \
        find /backup -type f -mtime +7 -delete; \
      sleep 3600; done" ]

  rabbitmq:
    image: "rabbitmq:3-management"  # Usa l'immagine RabbitMQ con interfaccia di gestione
    container_name: rabbitmq
    hostname: 3dgs-job-queue    
    ports:
      - "15672:15672"  # Interfaccia di gestione RabbitMQ
      - "5672:5672"    # Porta di comunicazione AMQP (RabbitMQ)
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/  # Aggiungi il volume persistente per Rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json  # Monta il file definitions.json direttamente
    networks:
      - my_network
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_DEFAULT_PASS}
    command: >
      bash -c "rabbitmq-server & 
               until rabbitmqctl await_startup; do sleep 1; done; 
               rabbitmqctl import_definitions /etc/rabbitmq/definitions.json; 
               tail -f /dev/null"

volumes:
  mongodb_data:  # Definisce il volume del db
    driver: local
  mongo_backups:
    driver: local
  rabbitmq_data:  # Definisce il volume della coda di messaggi
    driver: local 
  shared_data:  # Definisce il volume condiviso tra job-executor e gaussian-splatting
    driver: local

networks:
  my_network:
    driver: bridge


