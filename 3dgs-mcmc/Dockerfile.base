FROM nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive

# Update and install dependencies including COLMAP prerequisites
RUN apt update && apt upgrade -y && apt install -y \
    git cmake libxmu-dev libxi-dev libgl-dev libomp-dev \
    python3-dev python3-venv python3-pip \
    build-essential ninja-build wget \
    libboost-program-options-dev libboost-filesystem-dev libboost-graph-dev \
    libboost-system-dev libboost-test-dev libeigen3-dev libflann-dev \
    libfreeimage-dev libmetis-dev libgoogle-glog-dev libgflags-dev \
    libsqlite3-dev libglew-dev qtbase5-dev libqt5opengl5-dev libcgal-dev \
    gcc-10 g++-10 \
    libatlas-base-dev libsuitesparse-dev

# Build and install Ceres Solver
WORKDIR /workspace
RUN git clone https://github.com/ceres-solver/ceres-solver.git
WORKDIR /workspace/ceres-solver
RUN git checkout 2.1.0 && \
    mkdir build && cd build && \
    CC=/usr/bin/gcc-10 \
    CXX=/usr/bin/g++-10 \
    cmake .. -GNinja \
        -DBUILD_TESTING=OFF \
        -DBUILD_EXAMPLES=OFF \
        -DCMAKE_BUILD_TYPE=Release && \
    ninja && \
    ninja install && \
    ldconfig

    WORKDIR /workspace
    RUN git clone https://github.com/colmap/colmap.git
    WORKDIR /workspace/colmap
    # Create build directory inside COLMAP directory
    RUN mkdir build
    WORKDIR /workspace/colmap/build
    # Run cmake from inside the build directory
    RUN CC=/usr/bin/gcc-10 \
        CXX=/usr/bin/g++-10 \
        CUDAHOSTCXX=/usr/bin/g++-10 \
        cmake .. -GNinja \
            -DCMAKE_CUDA_ARCHITECTURES="86;89" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local && \
        ninja && \
        ninja install

WORKDIR /workspace
RUN git clone  https://github.com/ubc-vision/3dgs-mcmc.git --recursive

WORKDIR /workspace/3dgs-mcmc

# Copy requirements
COPY requirements.txt /workspace/3dgs-mcmc/

# Install Python packages directly
RUN pip3 install --upgrade pip && \
    pip3 install torch torchvision --extra-index-url https://download.pytorch.org/whl/cu121
   
# Install other requirements
RUN pip3 install -r requirements.txt

# Set CUDA environment variables
ENV TORCH_CUDA_ARCH_LIST="8.6 8.9+PTX"
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Build and install the submodules
RUN cd submodules/diff-gaussian-rasterization && pip3 install .
RUN cd submodules/simple-knn && pip3 install .

# Clone Depth Anything V2 repository
WORKDIR /workspace
RUN git clone https://github.com/DepthAnything/Depth-Anything-V2.git

# Install Depth Anything V2 dependencies
WORKDIR /workspace/Depth-Anything-V2
RUN pip3 install opencv-python transformers pillow numpy matplotlib

# Create checkpoints directory
RUN mkdir -p /workspace/Depth-Anything-V2/checkpoints

# Download pre-trained weights (Depth-Anything-V2-Large)
RUN wget -O /workspace/Depth-Anything-V2/checkpoints/depth_anything_v2_vitl.pth \
    https://huggingface.co/depth-anything/Depth-Anything-V2-Large/resolve/main/depth_anything_v2_vitl.pth

# Set working directory back to gaussian-splatting
WORKDIR /workspace/3dgs-mcmc

# Start command
CMD ["bash"]
